% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calc_gof.R
\name{calc_gof}
\alias{calc_gof}
\title{Calculate Goodness-of-fit for simulation result using observations}
\usage{
calc_gof(obs, simres, gof_fun)
}
\arguments{
\item{obs}{data.frame of observations, with the names being looked up in simres.
One of the columns has to refer to the dates of observations. Soil layer-specific
values are identified by the layer number appended to the variable name. E.g., to match
the water potential obsvered in th 4 layer, the column has to be named psimi4.}

\item{simres}{list of data.frames with simulation results}

\item{gof_fun}{function with arguments sim, obs}
}
\value{
named vector or list of named vectors with the Goodness-of-fit measure(s)
of the variables found in simres and matched to the names of observations.
If multiple equivalents for the names in obs are found in simres, multiple values are returned.
}
\description{
Calculate Goodness-of-fit for simulation result using observations
}
\examples{
# Set up lists containing model control options and model parameters:
param.b90 <- setparam_LWFB90()
options.b90 <- setoptions_LWFB90()

# Set start and end Dates for the simulation
options.b90$startdate <- as.Date("2002-2-15")
options.b90$enddate <- as.Date("2003-07-5")

# Derive soil hydraulic properties from soil physical properties
# using pedotransfer functions
soil <- cbind(slb1_soil, hydpar_wessolek_mvg(slb1_soil$texture))

# Run LWF-Brook90
b90.result <- runLWFB90(project.dir = "example_run_b90",
                        options.b90 = options.b90,
                        param.b90 = param.b90,
                        climate = slb1_meteo,
                        soil = soil)

# prepare observations
observations <- slb1_mpot #'daily water potential in different soil depths
names(observations)[2:6] <- c("psimi5", "psimi7", "psimi10", "psimi16","psimi21")

observations <- observations[observations$dates >= options.b90$startdate
                             & observations$dates <= options.b90$enddate,]
# calculate gof- easure using simulation results and observations
calc_gof(obs = observations,
         b90.result,
         gof_fun = function(sim, obs) {mean(obs-sim, na.rm = TRUE)})
# multiple gof-measures
calc_gof(obs = observations, b90.result,
         gof_fun = list(WilmD = hydroGOF::d, bR2 = hydroGOF::br2))
}
