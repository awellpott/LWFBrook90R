% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calc_gof.R
\name{calc_gof}
\alias{calc_gof}
\title{Calculate Goodness-of-fit for simulation result using observations}
\usage{
calc_gof(x, obs, gof_fun)
}
\arguments{
\item{x}{list of data.frames with simulation results}

\item{obs}{data.frame of observations, with the names being looked up in x.
One of the columns has to refer to the dates of observations. Soil layer-specific
values are identified by the layer number appended to the variable name. E.g., to match
the water potential obsvered in th 4 layer, the column has to be named psimi4.}

\item{gof_fun}{function with arguments sim, obs}
}
\value{
named vector or list of named vectors with the Goodness-of-fit measure(s)
of the variables found in x and matched to the names of observations.
If multiple equivalents for the names in obs are found in x, multiple values are returned.
}
\description{
Calculate Goodness-of-fit for simulation result using observations
}
\examples{
# Set up lists containing model control options and model parameters:
param.b90 <- setparam_LWFB90()
options.b90 <- setoptions_LWFB90()

options.b90$startdate <- as.Date("2006-01-01")
options.b90$enddate <- as.Date("2006-12-31")

# Derive soil hydraulic properties from soil physical properties
# using pedotransfer functions
soil <- cbind(slb1_soil, hydpar_wessolek_mvg(slb1_soil$texture))

# Run LWF-Brook90
b90.result <- runLWFB90(project.dir = "example_run_b90",
                        options.b90 = options.b90,
                        param.b90 = param.b90,
                        climate = slb1_meteo,
                        soil = soil)

# prepare observations
observations <- slb1_mpot #'daily water potential in different soil depths
names(observations)[2:6] <- c("psimi5", "psimi7", "psimi10", "psimi16","psimi21")
observations <- observations[observations$dates >= options.b90$startdate
                             & observations$dates <= options.b90$enddate,]

# calculate gof-measure using simulation results and observations
# simulated water tension is in kPa, observed in hPa
calc_gof(obs = observations,
         b90.result,
         gof_fun = function(sim, obs) {mean(obs-sim/10, na.rm = TRUE)})

# multiple gof-measures
calc_gof(obs = observations, b90.result,
         gof_fun = list(
           rmse = function(sim, obs) sqrt(mean((obs - sim/10)^2, na.rm =TRUE)),
           me = function(sim,obs) {mean(obs-sim/10, na.rm = TRUE)}
         ))
}
