% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mrunLWFB90.R
\name{mrunLWFB90}
\alias{mrunLWFB90}
\title{Make a multirun simulation using a variable input parameters.}
\usage{
mrunLWFB90(paramvar, param.b90, options.b90, climate, soil = NULL,
  paramvar_nms = names(paramvar), multirun.dir = "MultiRuns/",
  keep.subdirs = FALSE, cores = 2, showProgress = TRUE, ...)
}
\arguments{
\item{paramvar}{data.frame of variable input parameters with realisations for each single run.
The ith values replace the list elements in param.b90 of the ith simulation,
with the column names of paramvar being matched to the names in param.b90.
In order to match values from paramvar to data.frame or vector elements in param.b90,
the respective column name of paramvar has to be setup from the name and index.
For example, to place the 2nd value of 'ths' in the soil_materials data.frame,
the respective column name of paramvar has to be called 'soil_materials.ths2'.
In order to replace the 3 value of pdur in param.b90, the column name has to be named 'pdur3'.
The function for replacing values in vector element and data.frames is \code{\link{replace_vecelements}}.}

\item{param.b90}{Named list of parameters, in which the parameters defined in paramvar will be replaced.}

\item{options.b90}{Named list of model control option to be used in all simulations.}

\item{climate}{data.frame with climate data passed to \code{\link{runLWFB90}}, or a list of climate data.frames}

\item{soil}{data.frame with soil properties passed to \code{\link{runLWFB90}}, or a list of lists with different soil profiles}

\item{paramvar_nms}{names of the parameters in paramvar to be replaced in param.b90}

\item{multirun.dir}{the directory where to create the subdirectories for the the single runs. Default 'MultiRuns/'}

\item{keep.subdirs}{keep sub-directories of the single runs? Default is FALSE}

\item{cores}{number of cores to use for parallel processing. Default is 3.}

\item{showProgress}{Show progressbar?}

\item{...}{Further arguments passed to \code{\link{runLWFB90}}.}
}
\value{
A named list with the results for the single runs. Simulation errors are passed on.
}
\description{
Repeatedly calls \code{\link{runLWFB90}} with varying input parameters in parallel,
stores the single run results in subdirectories and returns the results as a named list.
}
\examples{
#Set up lists containing model control options and model parameters:
param.b90 <- setparam_LWFB90()
options.b90 <- setoptions_LWFB90()

# Derive soil hydraulic properties from soil physical properties using pedotransfer functions
soil <- cbind(slb1_soil, hydpar_wessolek_mvg(slb1_soil$texture))

# Set start and end Dates for the simulation
options.b90$startdate <- as.Date("2002-01-01")
options.b90$enddate <- as.Date("2003-12-31")

# 'Coupmodel' shape option for the annual lai dynamic, with fixed budburst and leaf fall dates
options.b90$lai.method <- 'Coupmodel'
options.b90$budburst.method <- 'fixed'
options.b90$leaffall.method <- 'fixed'

#set up data.frame with variable parameters
n <- 10
vary_parms <- data.frame(shape.optdoy = runif(n,180,240),
                         shape.budburst = runif(n, 0.1,1),
                         winlaifrac = runif(n, 0,0.5),
                         budburstdoy = runif(n,100,150),
                         soil_materials.ths3 = runif(n, 0.3,0.5),
                         maxlai2 = runif(n,4,8))


# soil as soil_nodes and soil materials to param.b90, so ths3 can be looked up
param.b90[c("soil_nodes", "soil_materials")] <- soil_to_param(soil)
# set up maxlai with length 2, so maxlai2 of paramvar can be looked up
param.b90$maxlai <- c(5, 5)

# Make a Multirun-Simulation
b90.multi <- mrunLWFB90(paramvar = vary_parms,
                        param.b90 = param.b90,
                        options.b90 = options.b90,
                        climate = slb1_meteo)
names(b90.multi)

#extract results: EVAPDAY.ASC
evapday <- data.table::rbindlist(lapply(b90.multi,
                                        FUN = function(x) {x[["EVAPDAY.ASC"]]}),
                                 idcol = "srun")
evapday$dates <- with(evapday, as.Date(paste(YR,MO,DA), "\%Y \%m \%d"))

with(evapday[evapday$srun == "RunNo.1", ],
     plot(dates, cumsum(EVAP))
)

# same simulation, but return goodnes-fit-measure only.
# prepare observations
observations <- slb1_mpot #'daily water potential in different soil depths
# names of observations have to be found in simulation output.
names(observations)[2:6] <- c("psimi5", "psimi7", "psimi10", "psimi16","psimi21")

# run
b90.gofmpot <- mrunLWFB90(paramvar = vary_parms,
                          options.b90 = options.b90,
                          param.b90 = param.b90,
                          climate = slb1_meteo,
                          soil = soil,
                          obs = observations,
                          gof_fun = hydroGOF::NSE, #' Nash-Sutcliff efficiency
                          rtrn.output = F,
                          rtrn.input = F)
# collect the NSE-values
nse <- data.table::rbindlist(lapply(b90.gofmpot, function(x) {as.list(x$gof)}),
                             idcol = "srun")
#hist(nse$SWATDAY.ASC.psimi5)

}
